// auth.js - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
console.log('üîê auth.js –∑–∞–≥—Ä—É–∂–µ–Ω!');

let currentUser = null;
let users = {};

// ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

function loadData() {
    console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
    const savedUsers = localStorage.getItem('deutschUsers');
    if (savedUsers) {
        users = JSON.parse(savedUsers);
        console.log('üë• –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', Object.keys(users));
    }
    
    currentUser = localStorage.getItem('currentUser');
    console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
}

function saveData() {
    localStorage.setItem('deutschUsers', JSON.stringify(users));
    if (currentUser) {
        localStorage.setItem('currentUser', currentUser);
    }
}

// ==================== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ====================

function login(username, password) {
    console.log('üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);
    
    clearAuthErrors('login');
    
    let isValid = true;
    if (!username) {
        showFieldError('loginUsername', '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        isValid = false;
    }
    if (!password) {
        showFieldError('loginPassword', '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
        isValid = false;
    }
    if (!isValid) return false;
    
    if (!users[username]) {
        showFieldError('loginUsername', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
    }
    
    if (users[username].password !== password) {
        showFieldError('loginPassword', '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
        return false;
    }
    
    currentUser = username;
    saveData();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!');
    
    const modal = document.getElementById('authModal');
    if (modal) modal.style.display = 'none';
    
    const loginForm = document.getElementById('loginForm');
    if (loginForm) loginForm.reset();
    
    updateAuthInterface();
    showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + username + '!', 'success');
    
	setTimeout(() => {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞...');
        window.location.reload();
    }, 1500);
	
    return true;
}

function register(username, password, confirmPassword) {
    console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);
    
    clearAuthErrors('register');
    
    let isValid = true;
    if (!username) {
        showFieldError('registerUsername', '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        isValid = false;
    } else if (username.length < 3) {
        showFieldError('registerUsername', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤');
        isValid = false;
    }
    
    if (!password) {
        showFieldError('registerPassword', '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
        isValid = false;
    } else if (password.length < 4) {
        showFieldError('registerPassword', '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤');
        isValid = false;
    }
    
    if (!confirmPassword) {
        showFieldError('confirmPassword', '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
        isValid = false;
    } else if (password !== confirmPassword) {
        showFieldError('confirmPassword', '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        isValid = false;
    }
    
    if (!isValid) return false;
    
    if (users[username]) {
        showFieldError('registerUsername', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return false;
    }
    
    users[username] = {
        password: password,
        joinDate: new Date().toISOString(),
        progress: {
            a1: { completed: 0, total: 15, topics: {} },
            a2: { completed: 0, total: 15, topics: {} },
            b1: { completed: 0, total: 15, topics: {} },
            b2: { completed: 0, total: 15, topics: {} },
            c1: { completed: 0, total: 15, topics: {} },
            c2: { completed: 0, total: 15, topics: {} }
        },
        stats: {
            correctAnswers: 0,
            incorrectAnswers: 0,
            totalExercises: 0
        }
    };
    
    currentUser = username;
    saveData();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!');
    
    const modal = document.getElementById('authModal');
    if (modal) modal.style.display = 'none';
    
    const registerForm = document.getElementById('registerForm');
    if (registerForm) registerForm.reset();
    
    updateAuthInterface();
    showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + username + '!', 'success');
    
    return true;
}

// ==================== –ò–ù–¢–ï–†–§–ï–ô–° ====================

function updateAuthInterface() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å... currentUser:', currentUser);
    
    const authButton = document.getElementById('authButton');
    const userInfo = document.getElementById('userInfo');
    
    if (!authButton) return;
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    const newButton = authButton.cloneNode(true);
    authButton.parentNode.replaceChild(newButton, authButton);
    
    const cleanButton = document.getElementById('authButton');
    
    if (currentUser) {
        console.log('üë§ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –í–û–ô–î–ï–ù–û');
        if (userInfo) {
            userInfo.style.display = 'flex';
            const userNameElement = document.getElementById('userName');
            const userAvatarElement = document.getElementById('userAvatar');
            
            if (userNameElement) userNameElement.textContent = currentUser;
            if (userAvatarElement) userAvatarElement.textContent = currentUser.charAt(0).toUpperCase();
        }
        cleanButton.textContent = '–í—ã–π—Ç–∏';
        cleanButton.onclick = showLogoutConfirmation;
        
    } else {
        console.log('üö™ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–ï –í–û–ô–î–ï–ù–û');
        if (userInfo) userInfo.style.display = 'none';
        cleanButton.textContent = '–í–æ–π—Ç–∏';
        cleanButton.onclick = openAuthModal;
    }
	if (typeof updateLevelsProgress === 'function') {
        updateLevelsProgress();
    }
    if (typeof updateMainPageProgress === 'function') {
        updateMainPageProgress();
    }
}

// ==================== –í–´–•–û–î –ò–ó –°–ò–°–¢–ï–ú–´ ====================

function showLogoutConfirmation() {
    console.log('üö™ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞');
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingModal = document.getElementById('logoutConfirmModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.id = 'logoutConfirmModal';
    modal.className = 'modal';
    
    // HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <span class="notification-icon">üö™</span>
                <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞</h2>
            </div>
            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?</p>
            <div class="form-actions">
                <button id="confirmLogoutBtn" class="btn btn-red">–î–∞, –≤—ã–π—Ç–∏</button>
                <button id="cancelLogoutBtn" class="btn">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.body.appendChild(modal);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => {
        modal.classList.add('show');
    }, 10);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    document.getElementById('confirmLogoutBtn').onclick = function(e) {
        e.preventDefault();
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
            performLogout();
        }, 300);
    };
    
    document.getElementById('cancelLogoutBtn').onclick = function(e) {
        e.preventDefault();
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
        }, 300);
    };
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
    modal.onclick = function(event) {
        if (event.target === modal) {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }
    };
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    const keyHandler = function(event) {
        if (event.key === 'Escape') {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.remove();
                document.removeEventListener('keydown', keyHandler);
            }, 300);
        }
    };
    
    document.addEventListener('keydown', keyHandler);
}

function showAuthRequiredNotification() {
    const notification = document.createElement('div');
    notification.className = 'notification warning';
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-icon">üîí</span>
            <div class="notification-body">
                <div class="notification-title">–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</div>
                <div class="notification-text">–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</div>
            </div>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => notification.classList.add('show'), 100);
    
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 4000);
    
    // –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    notification.addEventListener('click', function() {
        openAuthModal();
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    });
}

function performLogout() {
    console.log('‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    const oldUser = currentUser;
    currentUser = null;
    localStorage.removeItem('currentUser');
    
    updateAuthInterface();
    showLogoutNotification(oldUser);
	
	setTimeout(() => {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞...');
        window.location.reload();
    }, 1500);
}

function showLogoutNotification(username) {
    const notification = document.createElement('div');
    notification.className = 'notification logout';
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-icon">üö™</span>
            <div class="notification-body">
                <div class="notification-title">–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã</div>
                <div class="notification-text">–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ ${username ? username : ''}</div>
            </div>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => notification.classList.add('show'), 100);
    
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 4000);
    
    notification.addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    });
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

function showFieldError(fieldId, message) {
    const input = document.getElementById(fieldId);
    const errorElement = document.getElementById(fieldId + 'Error');
    
    if (input && errorElement) {
        input.classList.add('input-error');
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }
}

function clearAuthErrors(formType) {
    const fields = formType === 'login' 
        ? ['loginUsername', 'loginPassword'] 
        : ['registerUsername', 'registerPassword', 'confirmPassword'];
    
    fields.forEach(fieldId => {
        const input = document.getElementById(fieldId);
        const errorElement = document.getElementById(fieldId + 'Error');
        
        if (input) input.classList.remove('input-error');
        if (errorElement) errorElement.style.display = 'none';
    });
}

function openAuthModal() {
    const modal = document.getElementById('authModal');
    if (!modal) return;
    modal.style.display = 'block';
    setupAuthModal();
}

function setupAuthModal() {
    const modal = document.getElementById('authModal');
    const closeBtn = document.getElementById('closeAuthModal');
    
    if (!modal) return;
    
    if (closeBtn) {
        closeBtn.onclick = function() {
            modal.style.display = 'none';
        };
    }
    
    modal.onclick = function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    };
    
    const tabs = document.querySelectorAll('.modal-tab');
    tabs.forEach(tab => {
        tab.onclick = function() {
            const tabName = this.getAttribute('data-tab');
            
            tabs.forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            const activeTab = document.getElementById(tabName + 'Tab');
            if (activeTab) {
                activeTab.classList.add('active');
            }
        };
    });
    
    const loginForm = document.getElementById('loginForm');
    if (loginForm) {
        loginForm.onsubmit = function(e) {
            e.preventDefault();
            const username = document.getElementById('loginUsername').value.trim();
            const password = document.getElementById('loginPassword').value;
            
            if (login(username, password)) {
                modal.style.display = 'none';
                loginForm.reset();
            }
        };
    }
    
    const registerForm = document.getElementById('registerForm');
    if (registerForm) {
        registerForm.onsubmit = function(e) {
            e.preventDefault();
            const username = document.getElementById('registerUsername').value.trim();
            const password = document.getElementById('registerPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (register(username, password, confirmPassword)) {
                modal.style.display = 'none';
                registerForm.reset();
            }
        };
    }
}

function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-icon">${type === 'success' ? '‚úì' : type === 'error' ? '‚úï' : '‚Ñπ'}</span>
            <div class="notification-body">
                <div class="notification-text">${message}</div>
            </div>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => notification.classList.add('show'), 100);
    
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 4000);
    
    notification.addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    });
}

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è auth system...');
    loadData();
    updateAuthInterface();
});

// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
window.openAuthModal = openAuthModal;
window.logout = showLogoutConfirmation;
window.updateAuthInterface = updateAuthInterface;
window.login = login;
window.register = register;